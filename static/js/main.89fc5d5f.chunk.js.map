{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","utils/getVisibleTodos.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","status","query","startFilter","All","filterReducer","filterState","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","visibleTodos","useMemo","normalizeTitle","title","toLowerCase","includes","Active","completed","Completed","getVisibleTodos","length","className","map","classNames","id","onClick","currentTodoActions","TodoFilter","setQuery","newQuery","filterActions","onSubmit","event","preventDefault","value","onChange","newStatus","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","href","name","App","setTodosFromServer","loadedTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,sDCgBCC,EALG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAGED,EAPM,iBAAyB,CAAEE,KAAM,uBA2BrCE,EAfY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KACT,QACE,OAAOE,I,iBDhCDN,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KEYZ,IAUaC,EAVK,SAACO,GAAD,MAAsC,CACtDL,KAAM,oBACNC,QAASI,IAQEP,EALI,SAACQ,GAAD,MAAoC,CACnDN,KAAM,mBACNC,QAASK,IAULC,EAAsB,CAAEF,OAAQR,EAAOW,IAAKF,MAAO,IAoB1CG,EAhBO,WAGR,IAFZC,EAEW,uDAFWH,EACtBH,EACW,uCACX,OAAQA,EAAOJ,MACb,IAAK,oBACH,OAAO,2BAAKU,GAAZ,IAAyBL,OAAQD,EAAOH,UAE1C,IAAK,mBACH,OAAO,2BAAKS,GAAZ,IAAyBJ,MAAOF,EAAOH,UAEzC,QACE,OAAOS,ICpCAZ,EALI,SAACa,GAAD,MAAoC,CACnDX,KAAM,YACNC,QAASU,IAiBIC,EAZM,WAGP,IAFZD,EAEW,uDAFK,GAChBP,EACW,uCACX,MACO,cADCA,EAAOJ,KAEJI,EAAOH,QAEAU,GCXdE,EAAcC,0BAAgB,CAClCC,YAAab,EACbc,OAAQP,EACRE,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,sCCfPC,EAAoCC,IACpCC,EAAkDC,I,OCIlDC,EAAqB,WAChC,IAAMC,EAAWL,IACXX,EAAQa,GAAe,SAAArB,GAAK,OAAIA,EAAMQ,SACtCiB,EAAeJ,GAAe,SAAArB,GAAK,OAAIA,EAAMY,eACnD,EAA0BS,GAAe,SAAArB,GAAK,OAAIA,EAAMa,UAAhDX,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,MAIVuB,EAAeC,mBAAQ,WAC3B,OCd2B,SAC7BnB,EACAN,EACAC,GAEA,IAAMyB,EAAiB,SAACC,GAAD,OAAmBA,EACvCC,cAAcC,SAAS5B,EAAM2B,gBAEhC,OAAQ5B,GACN,KAAKR,EAAOsC,OACV,OAAOxB,EAAMK,QACX,SAAAjB,GAAI,OAAKA,EAAKqC,WAAaL,EAAehC,EAAKiC,UAGnD,KAAKnC,EAAOwC,UACV,OAAO1B,EAAMK,QAAO,SAAAjB,GAAI,OAAIA,EAAKqC,WAAaL,EAAehC,EAAKiC,UAEpE,QACE,OAAOrB,EAAMK,QAAO,SAAAjB,GAAI,OAAIgC,EAAehC,EAAKiC,WDJ3CM,CAAgB3B,EAAON,EAAQC,KACrC,CAACK,EAAON,EAAQC,IAEnB,OACE,mCAC2B,IAAxBuB,EAAaU,OACZ,mBAAGC,UAAU,0BAAb,iEAIA,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIH7B,EAAM4B,OAAS,GACd,gCACGV,EAAaY,KAAI,SAAA1C,GAAI,OACpB,qBACE,UAAQ,OAERyC,UAAWE,IACT,CAAE,6BAAyC,OAAZd,QAAY,IAAZA,OAAA,EAAAA,EAAce,MAAO5C,EAAK4C,KAJ7D,UAOE,oBAAIH,UAAU,eAAd,SAA8BzC,EAAK4C,KACnC,oBAAIH,UAAU,eAAd,SACGzC,EAAKqC,WACJ,sBAAMI,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAYzC,EAAKqC,UACO,mBAApB,kBAFN,SAIGrC,EAAKiC,UAIV,oBAAIQ,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVxC,KAAK,SACL4C,QAAS,kBA9DcjB,EAASkB,EA8DD9C,KAJjC,SAME,sBAAMyC,UAAU,OAAhB,UACe,OAAZZ,QAAY,IAAZA,OAAA,EAAAA,EAAce,MAAO5C,EAAK4C,GACzB,mBAAGH,UAAU,qBAEb,mBAAGA,UAAU,uBAlChBzC,EAAK4C,eE1CfG,EAAuB,WAClC,IAAMnB,EAAWL,IACjB,EAA0BE,GAAe,SAAArB,GAAK,OAAIA,EAAMa,UAAhDX,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,MAGVyC,EAAW,SAACC,GAAD,OAAsBrB,EAASsB,EAAuBD,KAEvE,OACE,uBACER,UAAU,mBACVU,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGZ,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRa,MAAOhD,EACPiD,SAAU,SAACH,GAAD,OAbDI,EAasBJ,EAAMK,OAAOH,MAbb1B,EAASsB,EAAwBM,IAAxD,IAACA,GAUX,UAKE,wBAAQF,MAAOxD,EAAOW,IAAtB,iBACA,wBAAQ6C,MAAOxD,EAAOsC,OAAtB,oBACA,wBAAQkB,MAAOxD,EAAOwC,UAAtB,8BAKN,oBAAGG,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRxC,KAAK,OACLwC,UAAU,QACViB,YAAY,YACZJ,MAAO/C,EACPgD,SAAU,SAACH,GAAD,OAAWJ,EAASI,EAAMK,OAAOH,UAE7C,sBAAMb,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdlC,GACC,sBAAMkC,UAAU,gBAAgBkB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACR3D,KAAK,SACLwC,UAAU,SACVI,QAAS,kBAAMG,EAAS,gB,OCjDzBa,G,MAAmB,kBAC9B,qBAAKpB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASqB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICdMC,EAAsB,WACjC,MAAwBC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KACMhD,EAAWL,IACXvB,EAAOyB,GAAe,SAAArB,GAAK,OAAIA,EAAMY,eAW3C,OAPA6D,qBAAU,WDSW,IAACC,ECRpB,OAAI9E,QAAJ,IAAIA,KAAM8E,SDQUA,ECPV9E,EAAK8E,ODOwBhB,EAAG,iBAAiBgB,KCNtDT,KAAKO,KAET,IAGD,sBAAKnC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbkC,EAGA,sBAAKlC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYzC,QAJZ,IAIYA,OAJZ,EAIYA,EAAM4C,MAIlB,wBACE3C,KAAK,SACLwC,UAAU,SACV,UAAQ,cACRI,QA9BO,kBAAMjB,EAAS7B,WAkC1B,sBAAK0C,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBAA4CzC,QAA5C,IAA4CA,OAA5C,EAA4CA,EAAMiC,QAElD,oBAAGQ,UAAU,QAAQ,UAAQ,aAA7B,UACG,OAACzC,QAAD,IAACA,KAAMqC,UAGN,wBAAQI,UAAU,mBAAlB,kBAFA,wBAAQA,UAAU,kBAAlB,qBAID,OACD,mBAAGsC,KAAK,2BAAR,SAAoCJ,EAAKK,gBA9B/C,cAAC,EAAD,QCZKC,EAAgB,WAC3B,IAAMrD,EAAWL,IACXM,EAAeJ,GAAe,SAAArB,GAAK,OAAIA,EAAMY,eAC7CJ,EAAQa,GAAe,SAAArB,GAAK,OAAIA,EAAMQ,SAEtCsE,EAAqB,SAACC,GAAD,OAAyBvD,EAASwD,EAAsBD,KAOnF,OALAN,qBAAU,WFAkBf,EAAY,UEEnCO,KAAKa,KACP,IAGD,qCACE,qBAAKzC,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACG7B,EAAM4B,OACL,cAAC,EAAD,IACE,cAAC,EAAD,aAMXX,GACC,cAAC,EAAD,QCxCFwD,EAAO,kBACX,cAAC,IAAD,CAAUnE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNoE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.89fc5d5f.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nexport const actions = { setStatus, setQuery };\n\ntype Filter = {\n  status: Status;\n  query: string;\n};\n\nconst startFilter: Filter = { status: Status.All, query: '' };\n\ntype Action = SetStatusAction | SetQueryAction;\n\nconst filterReducer = (\n  filterState: Filter = startFilter,\n  action: Action,\n): Filter => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return { ...filterState, status: action.payload };\n\n    case 'filter/SET_QUERY':\n      return { ...filterState, query: action.payload };\n\n    default:\n      return filterState;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos/SET', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: SetTodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default: return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { getVisibleTodos } from '../../utils/getVisibleTodos';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const { status, query } = useAppSelector(state => state.filter);\n\n  const setSelectedTodo = (newTodo: Todo) => dispatch(currentTodoActions.setTodo(newTodo));\n\n  const visibleTodos = useMemo(() => {\n    return getVisibleTodos(todos, status, query);\n  }, [todos, status, query]);\n\n  return (\n    <>\n      {visibleTodos.length === 0 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          {todos.length > 0 && (\n            <tbody>\n              {visibleTodos.map(todo => (\n                <tr\n                  data-cy=\"todo\"\n                  key={todo.id}\n                  className={classNames(\n                    { 'has-background-info-light': selectedTodo?.id === todo.id },\n                  )}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={!todo.completed\n                        ? 'has-text-danger' : 'has-text-success'}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => setSelectedTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        {selectedTodo?.id === todo.id ? (\n                          <i className=\"far fa-eye-slash\" />\n                        ) : (\n                          <i className=\"far fa-eye\" />\n                        )}\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          )}\n        </table>\n      )}\n    </>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  status: Status,\n  query: string,\n) => {\n  const normalizeTitle = (title: string) => title\n    .toLowerCase().includes(query.toLowerCase());\n\n  switch (status) {\n    case Status.Active:\n      return todos.filter(\n        todo => !todo.completed && normalizeTitle(todo.title),\n      );\n\n    case Status.Completed:\n      return todos.filter(todo => todo.completed && normalizeTitle(todo.title));\n\n    default:\n      return todos.filter(todo => normalizeTitle(todo.title));\n  }\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { status, query } = useAppSelector(state => state.filter);\n\n  const setFilter = (newStatus: Status) => dispatch(filterActions.setStatus(newStatus));\n  const setQuery = (newQuery: string) => dispatch(filterActions.setQuery(newQuery));\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => setFilter(event.target.value as Status)}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n\n  const deleteTodo = () => dispatch(actions.removeTodo());\n\n  useEffect(() => {\n    if (todo?.userId) {\n      getUser(todo.userId)\n        .then(setUser);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={deleteTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {!todo?.completed ? (\n                <strong className=\"has-text-danger\">Planned</strong>\n              ) : (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n              {' by '}\n              <a href=\"mailto:Sincere@april.biz\">{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { TodoModal } from './components/TodoModal';\nimport { Todo } from './types/Todo';\nimport { actions as todosActions } from './features/todos';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n\n  const setTodosFromServer = (loadedTodos: Todo[]) => dispatch(todosActions.setTodos(loadedTodos));\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodosFromServer);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length ? (\n                <TodoList />\n              ) : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}